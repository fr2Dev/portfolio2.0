.clear:after,.clear:before{content:" ";display:table}.clear{*zoom:1}.clear:after{clear:both}*{box-sizing:border-box;text-rendering:optimizeLegibility}html{font-size:62.5%}body{color:#444}body,html{min-height:100vh}img{width:100%}ul{list-style:none}h1,h2,h3,h4 h5,h6,p,ul{padding:0;margin:0}a{color:inherit;text-decoration:inherit}

/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.u-flex{display:-ms-flexbox;display:flex}.icon{width:3rem;height:3rem}.icon--skills{width:5rem;height:5rem}.container{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;max-width:1248px;width:100%}.heading--3{position:relative;padding:8rem 0}.heading--3:after,.heading--3:before{content:"";display:block;position:absolute}.heading--3:before{content:attr(data-title);left:-2rem;opacity:.05;top:50%;transform:translateY(-60%);z-index:-1}.heading--3:after{width:5rem;height:3px;background:#fcc475;border-radius:50px}section:not(.hero){padding:0 2rem}.button{background:#4d1577;border:1px solid transparent;border-radius:3px;color:#fdfdfd;cursor:pointer;padding:.3em .75em}.button--inverted{background:transparent;border-color:#4d1577;color:#4d1577}.card{border:1px solid #ce5eb6;border-radius:3px;margin-bottom:5rem;padding:2rem;position:relative}.card__list{-ms-flex-wrap:wrap;flex-wrap:wrap}.card__item,.card__list{-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;display:-ms-flexbox;display:flex}.card__item{width:7.5rem;height:7.5rem;-ms-flex-positive:1;flex-grow:1;width:30%}.card__title{background:#fdfdfd;color:#4d1577;margin:0;padding:0 .6em;position:absolute;top:0;transform:translateY(-50%)}@font-face{font-family:Montserrat;font-weight:400;font-display:swap;src:local("Montserrat"),url(../fonts/Montserrat-Regular.woff2) format("woff2"),url(../fonts/Montserrat-Regular.woff) format("woff")}@font-face{font-family:Montserrat;font-weight:500;font-display:swap;src:url(../fonts/Montserrat-Medium.woff2) format("woff2"),url(../fonts/Montserrat-Medium.woff) format("woff")}@font-face{font-family:Montserrat;font-weight:700;font-display:swap;src:url(../fonts/Montserrat-Bold.woff2) format("woff2"),url(../fonts/Montserrat-Bold.woff) format("woff")}body{font:400 13px/1.6 Montserrat,sans-serif}.button{font-weight:500;font-size:1.8rem}.heading--3{font-size:2.2rem}.heading--3:before{font-size:250%;text-transform:capitalize}.heading--4{font-size:1.8rem;font-weight:500}.hero__name{font-size:2.5rem;font-weight:500}.hero__job{font-size:2.8rem;font-weight:700}.navbar{font-size:1.75rem;font-weight:500}.contact{font-size:1.6rem}.contact__comment,.contact__input{font-weight:500}.contact__comment,.contact__rules{font-size:1.4rem}::selection{background:#4d1577;color:#fff;text-shadow:none}::-moz-selection{background:#4d1577;color:#fff;text-shadow:none}::-webkit-selection{background:#4d1577;color:#fff;text-shadow:none}a{-webkit-tap-highlight-color:transparent}.navbar{width:100%;height:5rem;-ms-flex-align:center;align-items:center;background:#f8f8ff;display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between;padding:1.3rem 2rem;z-index:3}.navbar__icon,.navbar__icon:after,.navbar__icon:before{width:3rem;height:2px;background:#4d1577;border-radius:10px}.navbar__icon:after,.navbar__icon:before{content:"";display:block;position:absolute;transition:transform .2s ease-out}.navbar__icon:before{top:3px}.navbar__icon:after{bottom:3px}.navbar__logo{width:4rem}.navbar__item{color:#4d1577;margin-bottom:1rem}.navbar__item.active .navbar__link:after{width:100%}@media only screen and (min-width:1024px){.navbar__item{margin-left:6rem}}.navbar__menu{-ms-flex-align:center;align-items:center;display:-ms-flexbox;-ms-flex-pack:center;justify-content:center;background:inherit;display:flex;-ms-flex-direction:column;flex-direction:column;height:0%;left:0;margin-right:0;overflow:hidden;position:absolute;text-align:center;top:5rem;width:100vw;transition:height .3s ease-in-out}@media only screen and (min-width:1024px){.navbar__menu{-ms-flex-direction:row;flex-direction:row;height:100%;margin-right:inherit;position:inherit;width:auto;top:inherit}}.navbar__checkbox{height:0;position:absolute;visibility:hidden;width:0}.navbar__checkbox:checked~.navbar__menu{height:20rem}@media only screen and (min-width:1024px){.navbar__checkbox:checked~.navbar__menu{height:100%}}.navbar__checkbox:checked~.navbar__label .navbar__icon,.navbar__checkbox:checked~.navbar__label .navbar__icon:after,.navbar__checkbox:checked~.navbar__label .navbar__icon:before{background:transparent}.navbar__checkbox:checked~.navbar__label .navbar__icon:before{background:#4d1577;top:10px;transform:rotate(135deg)}.navbar__checkbox:checked~.navbar__label .navbar__icon:after{background:#4d1577;bottom:12px;transform:rotate(-135deg)}.navbar__label{width:4rem;height:100%;-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;cursor:pointer;position:relative;text-indent:-9999px}@media only screen and (min-width:1024px){.navbar__label{display:none}}.navbar__link{position:relative}.navbar__link:after{content:"";display:block;position:absolute;width:0;height:2px;background:#fcc475;border-radius:50px;bottom:-3px;left:0;transition:width .25s ease}.header,.navbar__link:active:after,.navbar__link:focus:after,.navbar__link:hover:after{width:100%}.header{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);background:#f8f8ff;position:fixed;top:0;z-index:2}.headroom{will-change:transform;transition:transform .2s linear}.headroom--pinned{transform:translateY(0)}.headroom--unpinned{transform:translateY(-100%)}.hero{width:100%;height:calc(100vh - 5rem);display:-ms-flexbox;display:flex;padding-top:5rem}.hero__container{-ms-flex-align:start;align-items:flex-start;padding:5rem 0}.hero__button-list,.hero__network{display:-ms-flexbox;display:flex}.hero__network{margin-top:1.5rem}.hero__social-icon{transition:transform .05s}.hero__social-icon:hover{cursor:pointer;transform:scale(1.1)}.hero__social-icon:not(:first-of-type){margin-left:1rem}.hero__name{color:#4d1577}.hero__description{padding:0 2rem}.hero__button-list{display:-ms-flexbox;display:flex;padding:4.5rem 2rem 0;width:100%}.hero__button:not(:first-of-type){margin-left:2rem}.hero__illustration{background:url(../img/svg/background-hero.svg);background-repeat:no-repeat;background-position:left 50%;-ms-flex-positive:1;flex-grow:1;width:100%}.hero__heading{position:relative}.hero__heading:before{background:#ffa012;animation:a 1.5s cubic-bezier(.19,1,.22,1) forwards;animation-delay:1s;border-radius:3px;content:"";height:100%;left:0;position:absolute;width:0;z-index:1}.hero__heading--2:before{animation-delay:2s;background:#4d1577}.hero__title{opacity:0;animation:b 1ms linear forwards;animation-delay:1.4s}.hero__title--2{animation-delay:2.4s}.hero__image{-ms-flex-positive:1;flex-grow:1;padding:0 2rem;width:100%}@keyframes a{0%{left:0;width:0}50%{left:0;width:105%}to{left:100%;width:0}}@keyframes b{0%{opacity:0}to{opacity:1}}.portfolio__list{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.portfolio__item{background:linear-gradient(180deg,#4d1577,#ce5eb6,#fcc475);padding:3px;border-radius:3px;overflow:hidden;margin:1.5rem 0;width:100%}.portfolio__item a{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center}.portfolio__item img{border-radius:3px;filter:grayscale(1);transition:filter .15s,transform .35s ease-out}.portfolio__item:focus img,.portfolio__item:hover img{filter:none;transform:scale(1.1)}.contact__item{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;margin-bottom:1.6rem;position:relative}.contact__item--textarea{margin-bottom:0}.contact__label{color:#444;display:block;font-weight:700;margin-left:1px;transform:translateY(-5rem);transition:transform .3s;z-index:-1}.contact__label--textarea{position:absolute;top:2rem;transition:all .3s}.contact__input{background:transparent;border:none;border-bottom:2px solid #4d1577;color:#777;transition:border-color .3s}.contact__input:placeholder-shown{border-color:rgba(68,68,68,.2)}.contact__input:placeholder-shown+.contact__label{transform:translateY(-2.7rem)}.contact__input:placeholder-shown+.contact__label--textarea{top:2.8rem}.contact__input:focus{border-color:#ce5eb6;outline:none}.contact__comment{background:#ef5350;border-radius:3px;color:#fff;margin-bottom:2rem;margin-top:-2rem;padding:0 .3em;transition:height .3s;width:-webkit-max-content;width:-moz-max-content;width:max-content}.contact__comment--textarea{margin-top:.8rem}.contact__asterix{font-weight:700}.contact__asterix--success{color:#66bb6a}.contact__asterix--error{color:#ef5350}.contact__rules{opacity:.8}.contact__button{margin-right:2rem}.contact__row-submit{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;margin:2rem 0 3rem}.contact__form-icons{width:2.8rem;height:2.8rem;position:relative}.contact__ajax-status{width:2.8rem;height:2.8rem;opacity:0;position:absolute;left:0;top:0}.contact__ajax-status.visible{opacity:1}.contact__ajax-status--spinner{background:transparent;border:.65rem solid #ce5eb6;border-radius:50%;border-right-color:transparent}.contact__ajax-status--spinner.visible{animation:c .75s infinite linear}:-ms-input-placeholder{background:transparent;opacity:0}::placeholder{background:transparent;opacity:0}.checkmark{stroke-dasharray:120}.checkmark.visible{animation:d .85s reverse forwards linear}@keyframes c{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes d{0%{stroke-dashoffset:0}to{stroke-dashoffset:120}}.footer{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;background:#222;color:#fff;padding:3rem;text-transform:uppercase}.footer__brand{color:#4d1577;font-weight:500;margin-right:.5rem}@supports (-webkit-background-clip:text){.footer__brand{background:linear-gradient(90deg,#ce5eb6,#fcc475);-webkit-background-clip:text;background-clip:text;-webkit-text-fill-color:transparent}}@media print{*{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="#"]:after,a[href^="javascript:"]:after{content:""}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}@page{margin:.5cm}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
